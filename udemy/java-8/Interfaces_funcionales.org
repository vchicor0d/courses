* Introducción
Una interfaz funcional es aquella que solo tiene un método abstracto, pudiendo tener otros estáticos o default, define objetos que no guardan valores como los objetos tradicionales, sino que sirven para guardar funciones.

Una interfaz funcional se anota con @FunctionalInterface y puede tener otros métodos abstractos siempre que provengan de la clase Object para poder sobreescribirlos.

Un ejemplo con la interfaz Comparator:

#+BEGIN_SRC java
  package java.util;

  public interface Comparator<T> {
    int compeare(T o1, T o2);

    boolean equals(Object obj);
  }
#+END_SRC

Si una interfaz está anotada con @FunctionalInterface el compilador dará error si esta no se ajusta a los patrones de las interfaces funcionales.

Las interfaces funcionales que están en la versión 8 de Java se encuentran en el paquete java.util.function.

Una interfaz funcional es normalmente usada junto a una expresión lambda que define la función, por ejemplo, si tenemos una interfaz funcional /Calculadora/ que define un método calcular de la siguiente manera:

#+BEGIN_SRC java
public interface Calculadora {
    
    
    public double calcular(int x, int y);
    
    
}
#+END_SRC

Para utilizarla necesitamos implementar el método abstracto, pero en este caso, utilizaremos una serie de expresiones lambda para hacerlo:

#+BEGIN_SRC java
  public class LambdaTest3 {
    
    public static void main (String [] args) {

      //Cada uno de los parámetros que recibe el método operación es una
      //implementación de la interfaz Calculadora, concretamente de su
      //método calcular
    
      // Suma
      operacion((x, y) -> x + y);
    
      //Resta
      operacion((x, y) -> x - y);

      //Multiplicación
      operacion((x, y) -> x * y);

      //División
      operacion((x, y) -> x / y);

      //Resto
      operacion((x, y) -> x % y);
        
    }
    
    private static void operacion (Calculadora cal) {
        
      int x=4, y=5;
      double resultado = cal.calcular(x, y);
      System.out.println(resultado);
        
    }
    
  }
#+END_SRC

** La interfaz Function
La interfaz Function aplica una función a un elemento, requiere dos genéricos, su método abstracto ~apply~ recibie un parámetro del primer tipo y devuelve un objeto del segundo tipo, por lo que se utiliza principalmente para transformar tipos.

#+BEGIN_SRC java
public class TestFunction {
    public static void main(String[] args) {
        /*
        La interfaz Function aplica una función a un elemento.
        */
        Function<Integer,String> convertidor = x -> Integer.toString(x);
        System.out.println(convertidor.apply(30).length());
        System.out.println(convertidor.apply(3).length());
    }
}
#+END_SRC

** La interfaz BiFunction
Es similar a Function salvo porque admite dos elementos de entrada

#+BEGIN_SRC java
public class EjercicioBiFunction {
    
    public static void main(String[] args) {
        /*
        La interfaz BiFunction aplica una función a dos elementos
        */
        BiFunction<String, String, String> bi = (x, y) -> x + y;
        System.out.println(bi.apply("Hola, ", "mundo"));
    }
    
}
#+END_SRC

** La interfaz Predicate
La interfaz Predicate se refiere a un predicado booleano, su método abstracto /test/ comprueba si se cumple una determinada condición para un valor concreto.

#+BEGIN_SRC java
public class TestPredicate1 {
    
    public static void main(String[] args) {
        
        /*
        A la interfaz predicate se le pasa un test booleano
        */
        Predicate<Integer> predicate = (valor) -> valor > 0;
        
        System.out.println(predicate.test(123));
    }
    
}
#+END_SRC

** La interfaz BiPredicate
De manera análoga a lo que pasaba entre Function y BiFunction tenemos la interfaz BiPredicate para complementar a Predicate, en este caso determina si se cumple una condición (O predicado lógico) para dos elementos

#+BEGIN_SRC java
public class TestBiPredicate {

    public static void main(String[] args) {
        
        /*
        La interfaz BiPredicate aplica un test a 2 elementos
        */
        BiPredicate<Integer, Integer> bp = 
                (x, y) -> x < y;
        
        System.out.println(bp.test(2, 3));
    }
    
}
#+END_SRC

** La interfaz Consumer
Es similar a la interfaz Function, aplica una función a un elemento, pero en este caso no devuelve ningún valor.

#+BEGIN_SRC java
public class TestConsumer {

    public static void main(String[] args) {
        
        /*
        Consumer recibe un argumento y ejecuta una función sobre el
        */
        Consumer<String> cons = x -> System.out.println(x.toUpperCase());
        
        cons.accept("Víctor");
    }
    
}
#+END_SRC

** La interfaz BiConsumer
De manéra análoga a las interfaces anteriores, es igual que Consumer pero admite dos elementos:

#+BEGIN_SRC java
public class InterfazBiConsumerTest {
    
    public static void main(String[] args) {
        
        BiConsumer<Double, Double> biConsumer = 
                (num1, num2) -> System.out.println("La multiplicación es: " + num1*num2);
        
        biConsumer.accept(15.2, 2.4);
        
    }
    
}
#+END_SRC

Un buen ejemplo de el uso de esta interfaz puede ser para imprimir la clave y el valor de un objeto de la clase Map

#+BEGIN_SRC java 
//Usando el stream forEach, se podría hacer con un bucle
map.forEach((key, value) -> System.out.println("Clave: "+key + "\tValor: "+value));
#+END_SRC

** La interfaz supplier
Supplier nos proporciona un elemento que haya sido predefinido en su implementación:

#+BEGIN_SRC java
public class SupplierTest {
    
    public static void main(String[] args) {
        
        /*
        Supplier no admite parámetros y devuelve un objeto del tipo especificado
        */
        Supplier<String> sup = () -> "Hola, Mundo";
        
        System.out.println(sup.get());
        
    }
    
}
#+END_SRC

** La interfaz UnaryOperator
Es una especialización de la interfaz Function en la que sus parámetros de entrada y de salida son del mismo tipo

#+BEGIN_SRC java
public class TestUnaryOperator {
    public static void main(String[] args) {
        /*
        La interfaz UnaryOperator aplica una función a un elemento.
        */
        UnaryOperator<Integer> cuadrado = x -> x*x;
        System.out.println(cuadrado.apply(30));
        System.out.println(cuadrado.apply(3));
    }
}
#+END_SRC

** La interfaz BinaryOperator
Análogamente con la anterior, es una especialización de la interfaz BiFunction en la cual todos sus operadores son del mismo tipo

#+BEGIN_SRC java
public class EjercicioBinaryOperator {
    
    public static void main(String[] args) {
        /*
        La interfaz BinaryOperator aplica una función a dos elementos
        */
        BinaryOperator<String> bi = (x, y) -> x + y;
        System.out.println(bi.apply("Hola, ", "mundo"));
    }
    
}
#+END_SRC

** La interfaz Comparator
La interfaz comparator sirve para comparar dos objetos de una misma clase, devuelve un número entero menor que 0 si el primer objeto es mayor, un número mayor que 0 si el segundo objeto es el mayor y un 0 si son iguales, un ejemplo sería comparar personas por su número de identificación

#+BEGIN_SRC java
public class OrdenarPersonaPorId implements Comparator<Persona>{
    
    @Override
    public int compare(Persona o1, Persona o2) {
        return o1.getIdPersona() - o2.getIdPersona();
    }
    
}
#+END_SRC
